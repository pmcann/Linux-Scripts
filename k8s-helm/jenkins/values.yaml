controller:
  image:
    tag: lts-jdk17

  # Stop the sidecar from writing extra JCasC files
  sidecars:
    configAutoReload:
      enabled: false

  # Web service exposure
  serviceType: NodePort
  servicePort: 8080
  nodePort: 32010

  # Plugins
  installPlugins:
    - configuration-as-code
    - kubernetes
    - workflow-aggregator
    - git
    - git-client
    - docker-workflow
    - pipeline-utility-steps
    - pipeline-stage-view
    - credentials
    - credentials-binding
    - plain-credentials
    - ssh-credentials
    - scm-api
    - script-security
    - structs
    - token-macro
    - jackson2-api
    - snakeyaml-api
    - kubernetes-credentials-provider
    - job-dsl
    - github
    - github-branch-source
    - ansicolor
    - timestamper
    - matrix-auth

  JCasC:
    enabled: true
    defaultConfig: false
    configScripts:
      casc: |
        jenkins:
          systemMessage: "Managed via Configuration-as-Code"
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "admin"
                  password: "${JENKINS_ADMIN_PASSWORD}"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false

          # ---- Kubernetes cloud (agent pods)
          clouds:
            - kubernetes:
                name: "kubernetes"
                serverUrl: "https://kubernetes.default.svc"
                skipTlsVerify: true
                namespace: "jenkins"
                jenkinsUrl: "http://jenkins.jenkins.svc.cluster.local:8080"
                jenkinsTunnel: "jenkins-agent.jenkins.svc.cluster.local:50000"
                containerCapStr: "10"
                templates:
                  # base template for generic shell steps
                  - name: "base"
                    label: "k8s"
                    serviceAccount: "jenkins"
                    yamlMergeStrategy: "override"
                    nodeUsageMode: "NORMAL"
                    containers:
                      - name: "jnlp"
                        image: "jenkins/inbound-agent:jdk17"  # multi-arch
                        # args: '${computer.jnlpmac} ${computer.name}'  # optional; avoids JCasC warnings if commented
                        ttyEnabled: true
                        workingDir: "/home/jenkins/agent"
                      - name: "busybox"
                        image: "alpine:3.20"
                        command: "cat"
                        ttyEnabled: true
                        workingDir: "/home/jenkins/agent"

                  # kaniko template for container builds
                  - name: "kaniko"
                    label: "k8s-kaniko"
                    serviceAccount: "jenkins"
                    nodeUsageMode: "NORMAL"
                    containers:
                      - name: "jnlp"
                        image: "jenkins/inbound-agent:jdk17"
                        # args: '${computer.jnlpmac} ${computer.name}'  # optional
                        ttyEnabled: true
                        workingDir: "/home/jenkins/agent"

                      - name: "kaniko"
                        image: "gcr.io/kaniko-project/executor:debug"   # has /busybox and /kaniko
                        command: "/busybox/sh"
                        args: "-c tail -f /dev/null"                    # keep sidecar alive for container('kaniko'){ sh ... }
                        shell: "/busybox/sh"                            # lets Jenkins `sh` work in this container
                        envVars:
                          - envVar:
                              key: DOCKER_CONFIG
                              value: "/kaniko/.docker"
                          - envVar:
                              key: AWS_REGION
                              value: "us-east-1"
                        ttyEnabled: true
                        workingDir: "/home/jenkins/agent"

                    # Mount the short-lived ECR dockerconfig secret as /kaniko/.docker/config.json
                    yaml: |
                      spec:
                        containers:
                        - name: kaniko
                          volumeMounts:
                          - name: ecr-dockercfg
                            mountPath: /kaniko/.docker
                            readOnly: true
                        volumes:
                        - name: ecr-dockercfg
                          secret:
                            secretName: ecr-dockercfg
                            items:
                            - key: .dockerconfigjson
                              path: config.json

        credentials:
          system:
            domainCredentials:
              - credentials:
                  - string:
                      id: "github-token"
                      secret: "${GITHUB_TOKEN}"
                      description: "GitHub Personal Access Token"
                  - usernamePassword:
                      id: "ecr-creds"
                      username: "AWS"
                      password: "${ECR_PASSWORD}"
                      description: "ECR login token"

        unclassified:
          location:
            url: "http://jenkins.jenkins.svc.cluster.local:8080"

# Durable storage (your preserved EBS via PVC)
persistence:
  enabled: true
  existingClaim: jenkins

# RBAC so kubernetes-credentials-provider can read Secrets
rbac:
  create: true
  readSecrets: true

serviceAccount:
  create: true
  name: jenkins

