controller:
  image:
    tag: lts-jdk17

  # Env for JCasC placeholders
  containerEnv:
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          name: jenkins-env
          key: GITHUB_TOKEN
    - name: JENKINS_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          name: jenkins-env
          key: JENKINS_ADMIN_PASSWORD
    # Optional: only if you keep the ecr-creds block in JCasC
    - name: ECR_PASSWORD
      valueFrom:
        secretKeyRef:
          name: jenkins-env
          key: ECR_PASSWORD

  # Keep things stable in ephemeral mode
  sidecars:
    configAutoReload:
      enabled: false

  startupProbe:
    enabled: true
    periodSeconds: 10
    failureThreshold: 60   # ~10 minutes

  readinessProbe:
    periodSeconds: 10
    failureThreshold: 12

  livenessProbe:
    periodSeconds: 10
    failureThreshold: 12





  installPlugins:
    - configuration-as-code
    - kubernetes
    - workflow-aggregator
    - git
    - docker-workflow
    - credentials
    - plain-credentials
    - ssh-credentials
    - git-client
    - scm-api
    - script-security
    - structs
    - token-macro
    - jackson2-api
    - snakeyaml-api
    - kubernetes-credentials-provider
    - job-dsl
    - github
    - github-branch-source

  JCasC:
    enabled: true
    defaultConfig: false
    configScripts:
      jobs: |
        jobs:
          - script: |
              def owner    = 'pmcann'
              def backend  = 'tripfinder-backend'
              def frontend = 'tripfinder-frontend'

              multibranchPipelineJob('tripfinder-backend') {
                branchSources {
                  branchSource {
                    source {
                      github {
                        id("gh-backend-${owner}-${backend}")
                        repoOwner(owner)
                        repository(backend)
                        credentialsId('github-token')
                        traits {
                          gitHubBranchDiscovery { strategyId(1) }
                          gitHubPullRequestDiscovery { strategyId(1) }
                        }
                      }
                    }
                  }
                }
                factory { workflowBranchProjectFactory { scriptPath('Jenkinsfile') } }
                orphanedItemStrategy { discardOldItems { numToKeep(20) } }
                triggers { periodicFolderTrigger { interval('1m') } }
              }

              multibranchPipelineJob('tripfinder-frontend') {
                branchSources {
                  branchSource {
                    source {
                      github {
                        id("gh-frontend-${owner}-${frontend}")
                        repoOwner(owner)
                        repository(frontend)
                        credentialsId('github-token')
                        traits {
                          gitHubBranchDiscovery { strategyId(1) }
                          gitHubPullRequestDiscovery { strategyId(1) }
                        }
                      }
                    }
                  }
                }
                factory { workflowBranchProjectFactory { scriptPath('Jenkinsfile') } }
                orphanedItemStrategy { discardOldItems { numToKeep(20) } }
                triggers { periodicFolderTrigger { interval('1m') } }
              }

      casc: |
        jenkins:
          systemMessage: "Managed via Configuration-as-Code"
          securityRealm:
            local:
              allowsSignup: false
              users:
                - id: "admin"
                  password: "${JENKINS_ADMIN_PASSWORD}"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false
        credentials:
          system:
            domainCredentials:
              - credentials:
                  - string:
                      id: "github-token"
                      secret: "${GITHUB_TOKEN}"
                      description: "GitHub Personal Access Token"
                  - usernamePassword:
                      id: "ecr-creds"
                      username: "AWS"
                      password: "${ECR_PASSWORD}"
                      description: "ECR login token"
        unclassified:
          location:
            url: "http://jenkins.jenkins.svc.cluster.local:8080"

